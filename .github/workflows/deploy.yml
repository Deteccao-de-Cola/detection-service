name: Detection Service CI/CD

on:
  push:
    branches: [ main ]
    tags: '*'
  pull_request:
    branches: [ main ]

jobs:
    build:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: ["3.12"]
        steps:
        - uses: actions/checkout@v4

        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v3
          with:
            python-version: ${{ matrix.python-version }}

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: Analysing the code with pylint
          run: |
            pylint $(git ls-files '*.py')

          run: |
            set -e
            echo "üîç Running pylint..."
            pylint $(git ls-files '*.py') --score=y | tee pylint-report.txt

            SCORE=$(grep "Your code has been rated at" pylint-report.txt | sed -E 's/.*rated at ([0-9\.]+)\/10.*/\1/')
            echo "üßÆ Pylint score detected: $SCORE"

            python3 - << 'EOF'
            import sys
score = float("${SCORE}")
if score < 9:
    print(f"‚ùå Build failed ‚Äî Pylint score {score} is below 9.")
    sys.exit(1)
else:
    print(f"‚úÖ Pylint score {score} is good enough to pass.")
EOF
    test:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version: '3.12'

            - name: Install dependencies
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt

            - name: Run tests
              run: |
                pytest
    deploy:
        needs: [build, test]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
                fetch-tags: true

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build Docker image
              run: docker build . -t dougfarias/detection-service:$(git describe --tags --abbrev=0 || echo latest)

            - name: Push Docker image
              run: docker push dougfarias/detection-service:$(git describe --tags --abbrev=0 || echo latest)

            - name: Trigger Deploy
              run: |
                IMAGE_TAG=$(git describe --tags --abbrev=0 || echo latest)
                ENCODED_IMAGE=$(python3 -c "import urllib.parse; print(urllib.parse.quote('docker.io/dougfarias/detection-service:' + '$IMAGE_TAG'))")
                curl -X POST "${{ secrets.RENDER_URL_TRIGGER }}&imgURL=$ENCODED_IMAGE"


